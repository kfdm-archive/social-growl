#!/usr/bin/env python
# Use the location of this file for the CWD
import os
os.chdir(os.path.dirname(__file__))

CFG_FILE = os.path.expanduser('~/.gntp')
LOG_FORMAT  = '%(asctime)s %(levelname)-8s %(name)-12s %(message)s'
DEFAULT_PID = os.path.realpath('./social.pid')
DEFAULT_LOG = os.path.realpath('./social.log')
DEFAULT_ICON = os.path.realpath('./icon.png')

from time import sleep

from social.Message import GrowlNotifier
from social.Config import Config
from social.Socialcast import Socialcast
from social.daemon import Daemon

import optparse
import logging

class Parser(optparse.OptionParser):
	def __init__(self):
		optparse.OptionParser.__init__(self,usage="%prog [options] (start|stop|restart)")
		def store_path(option,opt,value,parser):
			setattr(parser.values, option.dest, os.path.realpath(value))
		self.add_option('-p','--pid',dest='pid',default=DEFAULT_PID,
			action='callback',callback=store_path,type=str)
		self.add_option('-l','--log',dest='log',default=DEFAULT_LOG,
			action='callback',callback=store_path,type=str)
		self.add_option('-v','--verbose',dest='verbose',default=logging.INFO,
			action='store_const',const=logging.DEBUG)

class Social(Daemon):
	def run(self,loop=True):
		config	= Config(CFG_FILE)
		growl = GrowlNotifier(config['social.appname'],DEFAULT_ICON)
		growl.register()
		sc		= Socialcast(config['social.domain'],config['social.email'],config['social.password'])
		msgs	= sc.messages()
		growl.msg_summary(len(msgs))
		growl.growl_notice(msgs[0])
		last_message = msgs[0].created_at
		while(True):
			try:
				logging.debug('Sleeping for %s\t%s',config['social.polldelay'],last_message)
				sleep(config['social.polldelay'])
				newest_message = last_message
				for msg in sc.messages():
					if msg.created_at > last_message:
						growl.growl_notice(msg)
						if msg.created_at > newest_message:
							newest_message = msg.created_at
				last_message = newest_message
				
			except KeyboardInterrupt:
				exit('Exiting')
			except:
				logging.exception('Unknown exception')

(options, args) = Parser().parse_args()
social = Social(options.pid)

try: 
	import setproctitle
	setproctitle.setproctitle('social-growl')
except ImportError:
	pass

if 'stop' in args:
	social.stop()
elif 'restart' in args:
	logging.basicConfig(level=options.verbose,filename=options.log,format=LOG_FORMAT)
	social.restart()
elif 'run' in args:
	logging.basicConfig(level=options.verbose,format=LOG_FORMAT)
	social.run()
else:
	logging.basicConfig(level=options.verbose,filename=options.log,format=LOG_FORMAT)
	social.start()
